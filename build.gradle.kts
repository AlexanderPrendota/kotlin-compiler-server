import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import org.springframework.boot.gradle.tasks.bundling.BootJar

val kotlinVersion: String by System.getProperties()
val policy: String by System.getProperties()

group = "com.compiler.server"
version = "$kotlinVersion-SNAPSHOT"
java.sourceCompatibility = JavaVersion.VERSION_1_8

val kotlinDependency: Configuration by configurations.creating
val kotlinJsDependency: Configuration by configurations.creating
val libJSFolder = "$kotlinVersion-js"
val libJVMFolder = kotlinVersion
val propertyFile = "application.properties"

val copyDependencies by tasks.creating(Copy::class) {
    from(kotlinDependency)
    into(libJVMFolder)
}
val copyJSDependencies by tasks.creating(Copy::class) {
    from(files(Callable { kotlinJsDependency.map { zipTree(it) } }))
    into(libJSFolder)
}

plugins {
    id("org.springframework.boot") version "2.2.0.RELEASE"
    id("io.spring.dependency-management") version "1.0.9.RELEASE"
    kotlin("jvm") version "1.3.61"
    kotlin("plugin.spring") version "1.3.61"
}

allprojects {
    repositories {
        mavenCentral()
        maven("https://cache-redirector.jetbrains.com/kotlin.bintray.com/kotlin-plugin")
    }
    afterEvaluate {
        dependencies {
            implementation("com.fasterxml.jackson.module:jackson-module-kotlin:2.10.2")
        }
    }
}

dependencies {

    kotlinDependency("junit:junit:4.12")
    kotlinDependency("org.hamcrest:hamcrest-core:2.2")
    kotlinDependency("com.fasterxml.jackson.module:jackson-module-kotlin:2.9.10")
    kotlinDependency("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion")
    kotlinDependency("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion")
    kotlinDependency("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.2") {
        exclude(group = "org.jetbrains.kotlin", module = "kotlin-stdlib")
    }
    kotlinJsDependency("org.jetbrains.kotlin:kotlin-stdlib-js:$kotlinVersion")

    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("junit:junit:4.12")
    implementation("org.jetbrains.intellij.deps:trove4j:1.0.20190514")
    implementation("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion")
    implementation("org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion")
    implementation("org.jetbrains.kotlin:kotlin-test:$kotlinVersion")
    implementation("org.jetbrains.kotlin:kotlin-compiler:$kotlinVersion")
    implementation("org.jetbrains.kotlin:kotlin-script-runtime:$kotlinVersion")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-js:$kotlinVersion")
    implementation("org.jetbrains.kotlin:kotlin-plugin-ij193:$kotlinVersion") {
        isTransitive = false
    }
    implementation(project(":executors"))

    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude(group = "org.junit.vintage", module = "junit-vintage-engine")
    }
    testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.2")
}

fun buildPropertyFile() {
    rootDir.resolve("src/main/resources/${propertyFile}").apply {
        println("Generate properties into $absolutePath")
        parentFile.mkdirs()
        writeText(generateProperties())
    }
}

fun generateProperties(prefix: String = "") = """
    # this file is autogenerated by build.gradle.kts
    kotlin.version=${kotlinVersion}
    policy.file=${prefix + policy}
    libraries.folder.jvm=${prefix + libJVMFolder}
    libraries.folder.js=${prefix + libJSFolder}
""".trimIndent()

fun generateWebpackExecutorEnv() {
    val result = exec {
        executable = "bash"
        args("-l", "-c", "yarn -v")
        isIgnoreExitValue = true
    }
    if (result.exitValue != 0) {
        println("Yarn not found. Skipping webpack integration in JS executor environment.")
    } else {
        val jsDeps = kotlinJsDependency.resolvedConfiguration.resolvedArtifacts.mapNotNull { artifact ->
            val version = artifact.moduleVersion.id.version
            zipTree(artifact.file).matching {
                this.include {
                    !it.path.contains('/')
                }
            }.find { it.extension == "js" && !it.nameWithoutExtension.endsWith("meta") }?.nameWithoutExtension?.let {
                copy {
                    from(zipTree(artifact.file))
                    into("$libJSFolder/META-INF/packages_imported/$it/$version")
                }
                val file = file("$libJSFolder/META-INF/packages_imported/$it/$version/package.json")
                if (!file.exists()) {
                    file.run {
                        writeText(
                            """
                            {
                              "main": "$it.js",
                              "devDependencies": {},
                              "dependencies": {},
                              "peerDependencies": {},
                              "optionalDependencies": {},
                              "bundledDependencies": [],
                              "name": "$it",
                              "version":  "$version"
                            }
                        """.trimIndent()
                        )
                    }
                }
                it to version
            }
        }
        file("$libJSFolder/META-INF/package.json").run {
            writeText(
                """
                {
                  "private": true,
                  "workspaces": [
                  ${jsDeps.map {
                    "\"packages_imported/${it.first}/${it.second}\""
                }.joinToString(",\n")}
                  ],
                  "devDependencies": {},
                  "dependencies": {},
                  "peerDependencies": {},
                  "optionalDependencies": {},
                  "bundledDependencies": [],
                  "name": "executor",
                  "version": "1.0.0"
                }
                """.trimIndent()
            )
        }
        exec {
            executable = "yarn"
            args("install")
            workingDir = file("$libJSFolder/META-INF")
        }
    }
}

tasks.withType<KotlinCompile> {
    kotlinOptions {
        freeCompilerArgs = listOf("-Xjsr305=strict", "-Xskip-metadata-version-check")
        jvmTarget = "1.8"
    }
    dependsOn(copyDependencies)
    dependsOn(copyJSDependencies)
    dependsOn(":executors:jar")
    buildPropertyFile()
    doLast {
        generateWebpackExecutorEnv()
    }
}

tasks.withType<BootJar> {
    //https://stackoverflow.com/questions/57727150/kotlin-script-engine-with-spring-boot-self-running-war
    requiresUnpack("**/kotlin-*.jar")
    requiresUnpack("**/kotlinx-*.jar")
}

tasks.withType<Test> {
    useJUnitPlatform()
}